import streamlit as st
from groq import Groq
import os
from xhtml2pdf import pisa
from io import BytesIO

# Set your Groq API key
os.environ["GROQ_API_KEY"] = "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"

client = Groq(api_key=os.environ["GROQ_API_KEY"])

st.title("üéØ AI-Powered Diet Planner (Groq + LLaMA)")

# ---- Mandatory Fields First ----
st.header("üìè Body Metrics (Required)")
height = st.number_input("Height (in cm):", min_value=50.0, max_value=250.0, step=0.1)
weight = st.number_input("Weight (in kg):", min_value=10.0, max_value=300.0, step=0.1)

# ---- Optional Fields ----
st.header("‚öôÔ∏è Additional Preferences (Optional)")
diet_type = st.radio("Diet Type:", ["", "Vegetarian", "Non-Vegetarian"], index=0)
do_workout = st.selectbox("Do you workout?", ["", "Yes", "No"])
workout_time = st.time_input("Workout Time (if any):") if do_workout == "Yes" else None
body_fat = st.slider("Body Fat Percentage (optional):", 1, 60) if st.checkbox("Add Body Fat %") else None
goal = st.selectbox("What's your goal?", ["", "Weight Loss", "Weight Gain"])
disease = st.text_area("Any diseases or medical conditions? (optional)")

# ---- New Supplements Section ----
st.header("üíä Supplements (Optional)")
supplements_list = ["Multivitamin", "Omega-3", "Vitamin D", "Protein Powder", "Creatine", "Calcium", "Magnesium"]

# Multiselect for supplements
selected_supplements = st.multiselect("Select supplements you take:", supplements_list)

# Dictionary to hold timing inputs for each selected supplement
supplement_timings = {}
for supp in selected_supplements:
    supplement_timings[supp] = st.time_input(f"Timing for {supp}:", key=f"time_{supp}")

# ---- Submit Button ----
if st.button("Generate Diet Plan"):
    if not height or not weight:
        st.error("Height and Weight are required to generate a diet plan.")
    else:
        with st.spinner("Creating personalized diet plan..."):

            # ----- Build Prompt Conditionally -----
            prompt_lines = [
                f"Create a personalized diet plan for someone with:",
                f"- Height: {height} cm",
                f"- Weight: {weight} kg"
            ]

            if diet_type:
                prompt_lines.append(f"- Diet Type: {diet_type}")
            if do_workout:
                prompt_lines.append(f"- Workout: {do_workout}")
            if workout_time:
                prompt_lines.append(f"- Workout Time: {workout_time.strftime('%H:%M')}")
            if body_fat:
                prompt_lines.append(f"- Body Fat %: {body_fat}")
            if goal:
                prompt_lines.append(f"- Goal: {goal}")
            if disease:
                prompt_lines.append(f"- Medical Conditions: {disease.strip()}")

            # Add supplements and their timings to prompt
            if selected_supplements:
                prompt_lines.append("- Supplements taken:")
                for supp in selected_supplements:
                    time_str = supplement_timings[supp].strftime('%H:%M')
                    prompt_lines.append(f"  - {supp} at {time_str}")
            prompt = """
Create a 7-day meal plan in clean HTML format using the exact structure and styling below.

üìå HTML Formatting Rules:
- Day name (e.g., "Monday") should be in <h2> tags to act as the main heading (large and bold).
- Each meal should be in a <h3> tag (e.g., "Meal 1: 8:00 AM").
- Use <strong> tags only for the labels "Food:" and "Macros:".
- The actual food items and macro values should be plain text.
- Use <br> to separate lines and add <br><br> to leave space between meals.
- At the end of each day, include:
  üìä Daily Total<br>
  ‚úÖ [macro totals]<br>
  Note: [short summary]<br><br>

‚õî Do not use example food items from the prompt. The model should choose all foods based on balanced nutrition (high protein, moderate carbs, healthy fats).

‚úÖ Structure should be repeated exactly for all 7 days (Monday to Sunday).
‚úÖ Only return valid, clean HTML. Do not include markdown, plain text, or code blocks.

---

Example for one day (structure only ‚Äî actual content should be generated by the model):

<h2>Monday</h2>

<h3>Meal 1: 8:00 AM</h3>
<strong>Food:</strong> [model selects food here]<br>
<strong>Macros:</strong> [calories] kcal | [protein]g P | [carbs]g C | [fat]g F<br><br>

<h3>Meal 2: 11:00 AM</h3>
<strong>Food:</strong> [model selects food here]<br>
<strong>Macros:</strong> ...<br><br>

<h3>Meal 3: 2:00 PM</h3>
<strong>Food:</strong> ...<br>
<strong>Macros:</strong> ...<br><br>

<h3>Meal 4: 6:00 PM</h3>
<strong>Food:</strong> ...<br>
<strong>Macros:</strong> ...<br><br>

üìä Daily Total<br>
‚úÖ [calories] kcal | [total protein]g Protein | [total carbs]g Carbs | [total fat]g Fat<br>
Note: [brief summary about the day‚Äôs nutrition]<br><br>

---

Repeat for Tuesday to Sunday using the same structure.
"""

            prompt_lines.append(prompt)

            full_prompt = "\n".join(prompt_lines)

            # ----- Call Groq API -----
            response = client.chat.completions.create(
                model="llama-3.1-8b-instant",
                messages=[{"role": "user", "content": full_prompt}],
                temperature=0.5,
                max_tokens=1024*8
            )

            reply = response.choices[0].message.content
            st.subheader("üìù Personalized Diet Plan")
            print(reply)
            st.markdown(reply, unsafe_allow_html=True)
            # Create a BytesIO buffer
            pdf_buffer = BytesIO()
            pisa.CreatePDF(reply, dest=pdf_buffer)
            pdf_buffer.seek(0)
            # Use Streamlit download button with bytes data
            st.download_button(
                label="Download Meal Plan PDF",
                data=pdf_buffer,
                file_name="meal_plan.pdf",
                mime="application/pdf"
            )